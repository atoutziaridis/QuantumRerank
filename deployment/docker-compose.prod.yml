# Docker Compose configuration for QuantumRerank production environment
version: '3.8'

services:
  # Main QuantumRerank API service (production)
  quantum-rerank:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: production
      args:
        ENVIRONMENT: production
        VERSION: ${VERSION:-1.0.0}
    image: quantum-rerank:${VERSION:-latest}
    container_name: quantum-rerank-api-prod
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_METRICS_PORT=8001
      - WORKERS=${WORKERS:-4}
    volumes:
      - logs:/app/logs
      - cache:/app/cache
      - /etc/ssl/certs:/etc/ssl/certs:ro  # SSL certificates
    depends_on:
      - redis
    networks:
      - quantum-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "./scripts/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for production caching
  redis:
    image: redis:7-alpine
    container_name: quantum-rerank-redis-prod
    volumes:
      - redis-data:/data
      - ./redis/redis-prod.conf:/usr/local/etc/redis/redis.conf
    networks:
      - quantum-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: quantum-rerank-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/private:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - quantum-rerank
    networks:
      - quantum-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Production monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-rerank-prometheus-prod
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - quantum-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana for production dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-rerank-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-prod:/etc/grafana/provisioning:ro
    networks:
      - quantum-net
    restart: unless-stopped
    secrets:
      - grafana_admin_password
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Log aggregation with Fluentd
  fluentd:
    build:
      context: ./logging
      dockerfile: Dockerfile.fluentd
    container_name: quantum-rerank-fluentd
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - logs:/var/log/quantum-rerank
    networks:
      - quantum-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  logs:
    driver: local
  cache:
    driver: local

networks:
  quantum-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

secrets:
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt