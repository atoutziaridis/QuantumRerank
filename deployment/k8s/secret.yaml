# Kubernetes Secrets for QuantumRerank
# NOTE: This is a template. In production, use proper secret management tools
# like HashiCorp Vault, AWS Secrets Manager, or sealed-secrets

apiVersion: v1
kind: Secret
metadata:
  name: quantum-rerank-secrets
  labels:
    app: quantum-rerank
type: Opaque
stringData:
  # Database credentials (if used)
  DATABASE_URL: "postgresql://quantum_user:CHANGE_ME@postgres:5432/quantum_rerank"
  DATABASE_PASSWORD: "CHANGE_ME"
  
  # Redis credentials
  REDIS_URL: "redis://redis:6379"
  REDIS_PASSWORD: ""
  
  # API secrets
  SECRET_KEY: "CHANGE_ME_TO_A_SECURE_RANDOM_STRING"
  JWT_SECRET_KEY: "CHANGE_ME_TO_A_SECURE_JWT_SECRET"
  API_KEY_SALT: "CHANGE_ME_TO_A_SECURE_SALT"
  
  # External service API keys
  OPENAI_API_KEY: "CHANGE_ME_IF_USING_OPENAI"
  HUGGINGFACE_API_KEY: "CHANGE_ME_IF_USING_HF"
  
  # Monitoring and observability
  PROMETHEUS_TOKEN: "CHANGE_ME_IF_USING_REMOTE_PROMETHEUS"
  GRAFANA_ADMIN_PASSWORD: "CHANGE_ME_SECURE_GRAFANA_PASSWORD"
  
  # SSL/TLS certificates (if not using cert-manager)
  TLS_CERT: ""
  TLS_KEY: ""
  
  # Cloud provider credentials (if needed)
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  GCP_SERVICE_ACCOUNT_KEY: ""
  AZURE_CLIENT_SECRET: ""

---
# Separate secret for TLS certificates
apiVersion: v1
kind: Secret
metadata:
  name: quantum-rerank-tls
  labels:
    app: quantum-rerank
type: kubernetes.io/tls
stringData:
  # TLS certificate and key (base64 encoded)
  # These would typically be managed by cert-manager
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # REPLACE WITH YOUR CERTIFICATE
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    # REPLACE WITH YOUR PRIVATE KEY
    -----END PRIVATE KEY-----

---
# Secret for API keys and authentication
apiVersion: v1
kind: Secret
metadata:
  name: quantum-rerank-api-keys
  labels:
    app: quantum-rerank
type: Opaque
stringData:
  # Master API keys for different tiers
  MASTER_API_KEY_ENTERPRISE: "qr_ent_CHANGE_ME_TO_SECURE_KEY"
  MASTER_API_KEY_PREMIUM: "qr_prem_CHANGE_ME_TO_SECURE_KEY"
  MASTER_API_KEY_STANDARD: "qr_std_CHANGE_ME_TO_SECURE_KEY"
  
  # Service-to-service authentication
  INTERNAL_SERVICE_TOKEN: "CHANGE_ME_TO_SECURE_SERVICE_TOKEN"
  
  # Webhook secrets
  WEBHOOK_SECRET: "CHANGE_ME_TO_SECURE_WEBHOOK_SECRET"

---
# Secret for monitoring credentials
apiVersion: v1
kind: Secret
metadata:
  name: quantum-rerank-monitoring-secrets
  labels:
    app: quantum-rerank
    component: monitoring
type: Opaque
stringData:
  # Prometheus configuration
  prometheus-config: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
    - job_name: 'quantum-rerank'
      static_configs:
      - targets: ['quantum-rerank-service:8001']
      metrics_path: '/metrics'
      scrape_interval: 10s
  
  # Grafana provisioning
  grafana-datasources: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: proxy
      isDefault: true

---
# Secret for database initialization (if using)
apiVersion: v1
kind: Secret
metadata:
  name: quantum-rerank-db-init
  labels:
    app: quantum-rerank
    component: database
type: Opaque
stringData:
  # Database initialization script
  init-db.sql: |
    -- Create database for QuantumRerank
    CREATE DATABASE quantum_rerank;
    CREATE USER quantum_user WITH PASSWORD 'CHANGE_ME';
    GRANT ALL PRIVILEGES ON DATABASE quantum_rerank TO quantum_user;
    
    -- Create tables (if using database)
    \c quantum_rerank;
    
    CREATE TABLE IF NOT EXISTS api_keys (
        id SERIAL PRIMARY KEY,
        key_hash VARCHAR(255) UNIQUE NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        tier VARCHAR(50) NOT NULL DEFAULT 'public',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP,
        is_active BOOLEAN DEFAULT true
    );
    
    CREATE TABLE IF NOT EXISTS usage_metrics (
        id SERIAL PRIMARY KEY,
        user_id VARCHAR(255) NOT NULL,
        endpoint VARCHAR(255) NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        duration_ms INTEGER,
        status_code INTEGER,
        request_size INTEGER,
        response_size INTEGER
    );

---
# ServiceAccount for pod authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quantum-rerank
  labels:
    app: quantum-rerank
automountServiceAccountToken: true

---
# Role for quantum-rerank service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: quantum-rerank-role
  labels:
    app: quantum-rerank
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding for quantum-rerank service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: quantum-rerank-rolebinding
  labels:
    app: quantum-rerank
subjects:
- kind: ServiceAccount
  name: quantum-rerank
  namespace: default
roleRef:
  kind: Role
  name: quantum-rerank-role
  apiGroup: rbac.authorization.k8s.io