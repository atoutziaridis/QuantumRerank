# Docker Compose configuration for QuantumRerank development environment
version: '3.8'

services:
  # Main QuantumRerank API service
  quantum-rerank:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
      args:
        ENVIRONMENT: development
        VERSION: dev
    container_name: quantum-rerank-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
    volumes:
      # Mount source code for hot reload
      - ../quantum_rerank:/app/quantum_rerank
      - ../config:/app/config
      - ../tests:/app/tests
      - logs:/app/logs
      - cache:/app/cache
    depends_on:
      - redis
      - prometheus
    networks:
      - quantum-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: quantum-rerank-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - quantum-net
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-rerank-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - quantum-net
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-rerank-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - quantum-net
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quantum-rerank-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - quantum-net
    restart: unless-stopped

  # Load testing service (for development)
  load-test:
    image: locustio/locust:latest
    container_name: quantum-rerank-loadtest
    ports:
      - "8089:8089"
    volumes:
      - ../tests/load_tests:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host=http://quantum-rerank:8000
    networks:
      - quantum-net
    profiles:
      - testing

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  logs:
    driver: local
  cache:
    driver: local

networks:
  quantum-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16